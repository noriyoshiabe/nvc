NAObject(attrs)
  addObserver(observer, function)
  removeObserver(observer)
  _notify(event, args)

  onSetXXX <- CallFromProxyIfExists

  events:
    NAObject:PropertyChange

NAArray(array or nil)
  addObserver(observer, function)
  removeObserver(observer)
  _notify(event, args)

  events:
    NAArray:Add index
    NAArray:Remove index
    NAArray:Replace index
    NAArray:Sort

NAViewController(view)
  view: NAView
  destroy: func
    -> destroy view and other disposing

  ... from app, ie. onSetXXX -> bind create child views and controllers or replace model, etc by app


NAView(element or html)
  element: Node -> create if html is passed
  hoge: Node -> <xxx na-view-property="hoge"></xxx>
  destroy: func
    -> remove element
  

NABinder(object)
  bind({to: element, keyPath: string, formatter: NAFormatter})
  unbind
NAInputBinder(object)
  bind({to: element, keyPath: string, formatter: NAFormatter})
  unbind
NAContentEditableBinder(object)
  bind({to: element, keyPath: string, formatter: NAFormatter})
  unbind
....

NAFormatter
  static nodeToObject(value) value
  static objectToNode(value) value
NADateFormatter
NAStringFormatter
NAIntegerFormatter
...
